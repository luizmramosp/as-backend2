
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Event
 * 
 */
export type Event = $Result.DefaultSelection<Prisma.$EventPayload>
/**
 * Model EventGroup
 * 
 */
export type EventGroup = $Result.DefaultSelection<Prisma.$EventGroupPayload>
/**
 * Model EventPeople
 * 
 */
export type EventPeople = $Result.DefaultSelection<Prisma.$EventPeoplePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Events
 * const events = await prisma.event.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Events
   * const events = await prisma.event.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<ExtArgs>;

  /**
   * `prisma.eventGroup`: Exposes CRUD operations for the **EventGroup** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventGroups
    * const eventGroups = await prisma.eventGroup.findMany()
    * ```
    */
  get eventGroup(): Prisma.EventGroupDelegate<ExtArgs>;

  /**
   * `prisma.eventPeople`: Exposes CRUD operations for the **EventPeople** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventPeople
    * const eventPeople = await prisma.eventPeople.findMany()
    * ```
    */
  get eventPeople(): Prisma.EventPeopleDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.7.0
   * Query Engine version: 79fb5193cf0a8fdbef536e4b4a159cad677ab1b9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Event: 'Event',
    EventGroup: 'EventGroup',
    EventPeople: 'EventPeople'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'event' | 'eventGroup' | 'eventPeople'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Event: {
        payload: Prisma.$EventPayload<ExtArgs>
        fields: Prisma.EventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findFirst: {
            args: Prisma.EventFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findMany: {
            args: Prisma.EventFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          create: {
            args: Prisma.EventCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          createMany: {
            args: Prisma.EventCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EventDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          update: {
            args: Prisma.EventUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          deleteMany: {
            args: Prisma.EventDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EventUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EventUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.EventGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventCountArgs<ExtArgs>,
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
      EventGroup: {
        payload: Prisma.$EventGroupPayload<ExtArgs>
        fields: Prisma.EventGroupFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventGroupFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventGroupPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventGroupFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventGroupPayload>
          }
          findFirst: {
            args: Prisma.EventGroupFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventGroupPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventGroupFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventGroupPayload>
          }
          findMany: {
            args: Prisma.EventGroupFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventGroupPayload>[]
          }
          create: {
            args: Prisma.EventGroupCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventGroupPayload>
          }
          createMany: {
            args: Prisma.EventGroupCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EventGroupDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventGroupPayload>
          }
          update: {
            args: Prisma.EventGroupUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventGroupPayload>
          }
          deleteMany: {
            args: Prisma.EventGroupDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EventGroupUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EventGroupUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventGroupPayload>
          }
          aggregate: {
            args: Prisma.EventGroupAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEventGroup>
          }
          groupBy: {
            args: Prisma.EventGroupGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EventGroupGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventGroupCountArgs<ExtArgs>,
            result: $Utils.Optional<EventGroupCountAggregateOutputType> | number
          }
        }
      }
      EventPeople: {
        payload: Prisma.$EventPeoplePayload<ExtArgs>
        fields: Prisma.EventPeopleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventPeopleFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPeoplePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventPeopleFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPeoplePayload>
          }
          findFirst: {
            args: Prisma.EventPeopleFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPeoplePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventPeopleFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPeoplePayload>
          }
          findMany: {
            args: Prisma.EventPeopleFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPeoplePayload>[]
          }
          create: {
            args: Prisma.EventPeopleCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPeoplePayload>
          }
          createMany: {
            args: Prisma.EventPeopleCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EventPeopleDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPeoplePayload>
          }
          update: {
            args: Prisma.EventPeopleUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPeoplePayload>
          }
          deleteMany: {
            args: Prisma.EventPeopleDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EventPeopleUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EventPeopleUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPeoplePayload>
          }
          aggregate: {
            args: Prisma.EventPeopleAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEventPeople>
          }
          groupBy: {
            args: Prisma.EventPeopleGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EventPeopleGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventPeopleCountArgs<ExtArgs>,
            result: $Utils.Optional<EventPeopleCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type EventCountOutputType
   */

  export type EventCountOutputType = {
    EventGroup: number
    EventPeople: number
  }

  export type EventCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    EventGroup?: boolean | EventCountOutputTypeCountEventGroupArgs
    EventPeople?: boolean | EventCountOutputTypeCountEventPeopleArgs
  }

  // Custom InputTypes

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventCountOutputType
     */
    select?: EventCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountEventGroupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventGroupWhereInput
  }


  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountEventPeopleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventPeopleWhereInput
  }



  /**
   * Count Type EventGroupCountOutputType
   */

  export type EventGroupCountOutputType = {
    EventPeople: number
  }

  export type EventGroupCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    EventPeople?: boolean | EventGroupCountOutputTypeCountEventPeopleArgs
  }

  // Custom InputTypes

  /**
   * EventGroupCountOutputType without action
   */
  export type EventGroupCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventGroupCountOutputType
     */
    select?: EventGroupCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * EventGroupCountOutputType without action
   */
  export type EventGroupCountOutputTypeCountEventPeopleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventPeopleWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Event
   */

  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventAvgAggregateOutputType = {
    id: number | null
  }

  export type EventSumAggregateOutputType = {
    id: number | null
  }

  export type EventMinAggregateOutputType = {
    id: number | null
    status: boolean | null
    title: string | null
    description: string | null
    grouped: boolean | null
  }

  export type EventMaxAggregateOutputType = {
    id: number | null
    status: boolean | null
    title: string | null
    description: string | null
    grouped: boolean | null
  }

  export type EventCountAggregateOutputType = {
    id: number
    status: number
    title: number
    description: number
    grouped: number
    _all: number
  }


  export type EventAvgAggregateInputType = {
    id?: true
  }

  export type EventSumAggregateInputType = {
    id?: true
  }

  export type EventMinAggregateInputType = {
    id?: true
    status?: true
    title?: true
    description?: true
    grouped?: true
  }

  export type EventMaxAggregateInputType = {
    id?: true
    status?: true
    title?: true
    description?: true
    grouped?: true
  }

  export type EventCountAggregateInputType = {
    id?: true
    status?: true
    title?: true
    description?: true
    grouped?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Event to aggregate.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
    orderBy?: EventOrderByWithAggregationInput | EventOrderByWithAggregationInput[]
    by: EventScalarFieldEnum[] | EventScalarFieldEnum
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _avg?: EventAvgAggregateInputType
    _sum?: EventSumAggregateInputType
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }

  export type EventGroupByOutputType = {
    id: number
    status: boolean
    title: string
    description: string
    grouped: boolean
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    title?: boolean
    description?: boolean
    grouped?: boolean
    EventGroup?: boolean | Event$EventGroupArgs<ExtArgs>
    EventPeople?: boolean | Event$EventPeopleArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectScalar = {
    id?: boolean
    status?: boolean
    title?: boolean
    description?: boolean
    grouped?: boolean
  }

  export type EventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    EventGroup?: boolean | Event$EventGroupArgs<ExtArgs>
    EventPeople?: boolean | Event$EventPeopleArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $EventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Event"
    objects: {
      EventGroup: Prisma.$EventGroupPayload<ExtArgs>[]
      EventPeople: Prisma.$EventPeoplePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      status: boolean
      title: string
      description: string
      grouped: boolean
    }, ExtArgs["result"]["event"]>
    composites: {}
  }


  type EventGetPayload<S extends boolean | null | undefined | EventDefaultArgs> = $Result.GetResult<Prisma.$EventPayload, S>

  type EventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: EventCountAggregateInputType | true
    }

  export interface EventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Event'], meta: { name: 'Event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EventFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EventFindUniqueArgs<ExtArgs>>
    ): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Event that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EventFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EventFindFirstArgs<ExtArgs>>
    ): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Event that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EventFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
    **/
    create<T extends EventCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EventCreateArgs<ExtArgs>>
    ): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Events.
     *     @param {EventCreateManyArgs} args - Arguments to create many Events.
     *     @example
     *     // Create many Events
     *     const event = await prisma.event.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EventCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
    **/
    delete<T extends EventDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EventDeleteArgs<ExtArgs>>
    ): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EventUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EventUpdateArgs<ExtArgs>>
    ): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EventDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EventUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EventUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
    **/
    upsert<T extends EventUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EventUpsertArgs<ExtArgs>>
    ): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Event model
   */
  readonly fields: EventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    EventGroup<T extends Event$EventGroupArgs<ExtArgs> = {}>(args?: Subset<T, Event$EventGroupArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventGroupPayload<ExtArgs>, T, 'findMany'> | Null>;

    EventPeople<T extends Event$EventPeopleArgs<ExtArgs> = {}>(args?: Subset<T, Event$EventPeopleArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPeoplePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Event model
   */ 
  interface EventFieldRefs {
    readonly id: FieldRef<"Event", 'Int'>
    readonly status: FieldRef<"Event", 'Boolean'>
    readonly title: FieldRef<"Event", 'String'>
    readonly description: FieldRef<"Event", 'String'>
    readonly grouped: FieldRef<"Event", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Event findUnique
   */
  export type EventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }


  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }


  /**
   * Event findFirst
   */
  export type EventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }


  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }


  /**
   * Event findMany
   */
  export type EventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }


  /**
   * Event create
   */
  export type EventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to create a Event.
     */
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
  }


  /**
   * Event createMany
   */
  export type EventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Event update
   */
  export type EventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to update a Event.
     */
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     */
    where: EventWhereUniqueInput
  }


  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
  }


  /**
   * Event upsert
   */
  export type EventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The filter to search for the Event to update in case it exists.
     */
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     */
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }


  /**
   * Event delete
   */
  export type EventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter which Event to delete.
     */
    where: EventWhereUniqueInput
  }


  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventWhereInput
  }


  /**
   * Event.EventGroup
   */
  export type Event$EventGroupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventGroup
     */
    select?: EventGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventGroupInclude<ExtArgs> | null
    where?: EventGroupWhereInput
    orderBy?: EventGroupOrderByWithRelationInput | EventGroupOrderByWithRelationInput[]
    cursor?: EventGroupWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventGroupScalarFieldEnum | EventGroupScalarFieldEnum[]
  }


  /**
   * Event.EventPeople
   */
  export type Event$EventPeopleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPeople
     */
    select?: EventPeopleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventPeopleInclude<ExtArgs> | null
    where?: EventPeopleWhereInput
    orderBy?: EventPeopleOrderByWithRelationInput | EventPeopleOrderByWithRelationInput[]
    cursor?: EventPeopleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventPeopleScalarFieldEnum | EventPeopleScalarFieldEnum[]
  }


  /**
   * Event without action
   */
  export type EventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
  }



  /**
   * Model EventGroup
   */

  export type AggregateEventGroup = {
    _count: EventGroupCountAggregateOutputType | null
    _avg: EventGroupAvgAggregateOutputType | null
    _sum: EventGroupSumAggregateOutputType | null
    _min: EventGroupMinAggregateOutputType | null
    _max: EventGroupMaxAggregateOutputType | null
  }

  export type EventGroupAvgAggregateOutputType = {
    id: number | null
    id_event: number | null
  }

  export type EventGroupSumAggregateOutputType = {
    id: number | null
    id_event: number | null
  }

  export type EventGroupMinAggregateOutputType = {
    id: number | null
    id_event: number | null
    name: string | null
  }

  export type EventGroupMaxAggregateOutputType = {
    id: number | null
    id_event: number | null
    name: string | null
  }

  export type EventGroupCountAggregateOutputType = {
    id: number
    id_event: number
    name: number
    _all: number
  }


  export type EventGroupAvgAggregateInputType = {
    id?: true
    id_event?: true
  }

  export type EventGroupSumAggregateInputType = {
    id?: true
    id_event?: true
  }

  export type EventGroupMinAggregateInputType = {
    id?: true
    id_event?: true
    name?: true
  }

  export type EventGroupMaxAggregateInputType = {
    id?: true
    id_event?: true
    name?: true
  }

  export type EventGroupCountAggregateInputType = {
    id?: true
    id_event?: true
    name?: true
    _all?: true
  }

  export type EventGroupAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventGroup to aggregate.
     */
    where?: EventGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventGroups to fetch.
     */
    orderBy?: EventGroupOrderByWithRelationInput | EventGroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventGroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventGroups
    **/
    _count?: true | EventGroupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventGroupAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventGroupSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventGroupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventGroupMaxAggregateInputType
  }

  export type GetEventGroupAggregateType<T extends EventGroupAggregateArgs> = {
        [P in keyof T & keyof AggregateEventGroup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventGroup[P]>
      : GetScalarType<T[P], AggregateEventGroup[P]>
  }




  export type EventGroupGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventGroupWhereInput
    orderBy?: EventGroupOrderByWithAggregationInput | EventGroupOrderByWithAggregationInput[]
    by: EventGroupScalarFieldEnum[] | EventGroupScalarFieldEnum
    having?: EventGroupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventGroupCountAggregateInputType | true
    _avg?: EventGroupAvgAggregateInputType
    _sum?: EventGroupSumAggregateInputType
    _min?: EventGroupMinAggregateInputType
    _max?: EventGroupMaxAggregateInputType
  }

  export type EventGroupGroupByOutputType = {
    id: number
    id_event: number
    name: string
    _count: EventGroupCountAggregateOutputType | null
    _avg: EventGroupAvgAggregateOutputType | null
    _sum: EventGroupSumAggregateOutputType | null
    _min: EventGroupMinAggregateOutputType | null
    _max: EventGroupMaxAggregateOutputType | null
  }

  type GetEventGroupGroupByPayload<T extends EventGroupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventGroupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupGroupByOutputType[P]>
        }
      >
    >


  export type EventGroupSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_event?: boolean
    name?: boolean
    event?: boolean | EventGroup$eventArgs<ExtArgs>
    EventPeople?: boolean | EventGroup$EventPeopleArgs<ExtArgs>
    _count?: boolean | EventGroupCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventGroup"]>

  export type EventGroupSelectScalar = {
    id?: boolean
    id_event?: boolean
    name?: boolean
  }

  export type EventGroupInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventGroup$eventArgs<ExtArgs>
    EventPeople?: boolean | EventGroup$EventPeopleArgs<ExtArgs>
    _count?: boolean | EventGroupCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $EventGroupPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EventGroup"
    objects: {
      event: Prisma.$EventPayload<ExtArgs> | null
      EventPeople: Prisma.$EventPeoplePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      id_event: number
      name: string
    }, ExtArgs["result"]["eventGroup"]>
    composites: {}
  }


  type EventGroupGetPayload<S extends boolean | null | undefined | EventGroupDefaultArgs> = $Result.GetResult<Prisma.$EventGroupPayload, S>

  type EventGroupCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventGroupFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: EventGroupCountAggregateInputType | true
    }

  export interface EventGroupDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventGroup'], meta: { name: 'EventGroup' } }
    /**
     * Find zero or one EventGroup that matches the filter.
     * @param {EventGroupFindUniqueArgs} args - Arguments to find a EventGroup
     * @example
     * // Get one EventGroup
     * const eventGroup = await prisma.eventGroup.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EventGroupFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EventGroupFindUniqueArgs<ExtArgs>>
    ): Prisma__EventGroupClient<$Result.GetResult<Prisma.$EventGroupPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one EventGroup that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EventGroupFindUniqueOrThrowArgs} args - Arguments to find a EventGroup
     * @example
     * // Get one EventGroup
     * const eventGroup = await prisma.eventGroup.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EventGroupFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EventGroupFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EventGroupClient<$Result.GetResult<Prisma.$EventGroupPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first EventGroup that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupFindFirstArgs} args - Arguments to find a EventGroup
     * @example
     * // Get one EventGroup
     * const eventGroup = await prisma.eventGroup.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EventGroupFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EventGroupFindFirstArgs<ExtArgs>>
    ): Prisma__EventGroupClient<$Result.GetResult<Prisma.$EventGroupPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first EventGroup that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupFindFirstOrThrowArgs} args - Arguments to find a EventGroup
     * @example
     * // Get one EventGroup
     * const eventGroup = await prisma.eventGroup.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EventGroupFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EventGroupFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EventGroupClient<$Result.GetResult<Prisma.$EventGroupPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more EventGroups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventGroups
     * const eventGroups = await prisma.eventGroup.findMany()
     * 
     * // Get first 10 EventGroups
     * const eventGroups = await prisma.eventGroup.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventGroupWithIdOnly = await prisma.eventGroup.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EventGroupFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventGroupFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventGroupPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a EventGroup.
     * @param {EventGroupCreateArgs} args - Arguments to create a EventGroup.
     * @example
     * // Create one EventGroup
     * const EventGroup = await prisma.eventGroup.create({
     *   data: {
     *     // ... data to create a EventGroup
     *   }
     * })
     * 
    **/
    create<T extends EventGroupCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EventGroupCreateArgs<ExtArgs>>
    ): Prisma__EventGroupClient<$Result.GetResult<Prisma.$EventGroupPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many EventGroups.
     *     @param {EventGroupCreateManyArgs} args - Arguments to create many EventGroups.
     *     @example
     *     // Create many EventGroups
     *     const eventGroup = await prisma.eventGroup.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EventGroupCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventGroupCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EventGroup.
     * @param {EventGroupDeleteArgs} args - Arguments to delete one EventGroup.
     * @example
     * // Delete one EventGroup
     * const EventGroup = await prisma.eventGroup.delete({
     *   where: {
     *     // ... filter to delete one EventGroup
     *   }
     * })
     * 
    **/
    delete<T extends EventGroupDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EventGroupDeleteArgs<ExtArgs>>
    ): Prisma__EventGroupClient<$Result.GetResult<Prisma.$EventGroupPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one EventGroup.
     * @param {EventGroupUpdateArgs} args - Arguments to update one EventGroup.
     * @example
     * // Update one EventGroup
     * const eventGroup = await prisma.eventGroup.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EventGroupUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EventGroupUpdateArgs<ExtArgs>>
    ): Prisma__EventGroupClient<$Result.GetResult<Prisma.$EventGroupPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more EventGroups.
     * @param {EventGroupDeleteManyArgs} args - Arguments to filter EventGroups to delete.
     * @example
     * // Delete a few EventGroups
     * const { count } = await prisma.eventGroup.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EventGroupDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventGroupDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventGroups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventGroups
     * const eventGroup = await prisma.eventGroup.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EventGroupUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EventGroupUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EventGroup.
     * @param {EventGroupUpsertArgs} args - Arguments to update or create a EventGroup.
     * @example
     * // Update or create a EventGroup
     * const eventGroup = await prisma.eventGroup.upsert({
     *   create: {
     *     // ... data to create a EventGroup
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventGroup we want to update
     *   }
     * })
    **/
    upsert<T extends EventGroupUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EventGroupUpsertArgs<ExtArgs>>
    ): Prisma__EventGroupClient<$Result.GetResult<Prisma.$EventGroupPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of EventGroups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupCountArgs} args - Arguments to filter EventGroups to count.
     * @example
     * // Count the number of EventGroups
     * const count = await prisma.eventGroup.count({
     *   where: {
     *     // ... the filter for the EventGroups we want to count
     *   }
     * })
    **/
    count<T extends EventGroupCountArgs>(
      args?: Subset<T, EventGroupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventGroupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventGroup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventGroupAggregateArgs>(args: Subset<T, EventGroupAggregateArgs>): Prisma.PrismaPromise<GetEventGroupAggregateType<T>>

    /**
     * Group by EventGroup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EventGroup model
   */
  readonly fields: EventGroupFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventGroup.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventGroupClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    event<T extends EventGroup$eventArgs<ExtArgs> = {}>(args?: Subset<T, EventGroup$eventArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    EventPeople<T extends EventGroup$EventPeopleArgs<ExtArgs> = {}>(args?: Subset<T, EventGroup$EventPeopleArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPeoplePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the EventGroup model
   */ 
  interface EventGroupFieldRefs {
    readonly id: FieldRef<"EventGroup", 'Int'>
    readonly id_event: FieldRef<"EventGroup", 'Int'>
    readonly name: FieldRef<"EventGroup", 'String'>
  }
    

  // Custom InputTypes

  /**
   * EventGroup findUnique
   */
  export type EventGroupFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventGroup
     */
    select?: EventGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventGroupInclude<ExtArgs> | null
    /**
     * Filter, which EventGroup to fetch.
     */
    where: EventGroupWhereUniqueInput
  }


  /**
   * EventGroup findUniqueOrThrow
   */
  export type EventGroupFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventGroup
     */
    select?: EventGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventGroupInclude<ExtArgs> | null
    /**
     * Filter, which EventGroup to fetch.
     */
    where: EventGroupWhereUniqueInput
  }


  /**
   * EventGroup findFirst
   */
  export type EventGroupFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventGroup
     */
    select?: EventGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventGroupInclude<ExtArgs> | null
    /**
     * Filter, which EventGroup to fetch.
     */
    where?: EventGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventGroups to fetch.
     */
    orderBy?: EventGroupOrderByWithRelationInput | EventGroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventGroups.
     */
    cursor?: EventGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventGroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventGroups.
     */
    distinct?: EventGroupScalarFieldEnum | EventGroupScalarFieldEnum[]
  }


  /**
   * EventGroup findFirstOrThrow
   */
  export type EventGroupFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventGroup
     */
    select?: EventGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventGroupInclude<ExtArgs> | null
    /**
     * Filter, which EventGroup to fetch.
     */
    where?: EventGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventGroups to fetch.
     */
    orderBy?: EventGroupOrderByWithRelationInput | EventGroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventGroups.
     */
    cursor?: EventGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventGroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventGroups.
     */
    distinct?: EventGroupScalarFieldEnum | EventGroupScalarFieldEnum[]
  }


  /**
   * EventGroup findMany
   */
  export type EventGroupFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventGroup
     */
    select?: EventGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventGroupInclude<ExtArgs> | null
    /**
     * Filter, which EventGroups to fetch.
     */
    where?: EventGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventGroups to fetch.
     */
    orderBy?: EventGroupOrderByWithRelationInput | EventGroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventGroups.
     */
    cursor?: EventGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventGroups.
     */
    skip?: number
    distinct?: EventGroupScalarFieldEnum | EventGroupScalarFieldEnum[]
  }


  /**
   * EventGroup create
   */
  export type EventGroupCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventGroup
     */
    select?: EventGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventGroupInclude<ExtArgs> | null
    /**
     * The data needed to create a EventGroup.
     */
    data: XOR<EventGroupCreateInput, EventGroupUncheckedCreateInput>
  }


  /**
   * EventGroup createMany
   */
  export type EventGroupCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EventGroups.
     */
    data: EventGroupCreateManyInput | EventGroupCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * EventGroup update
   */
  export type EventGroupUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventGroup
     */
    select?: EventGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventGroupInclude<ExtArgs> | null
    /**
     * The data needed to update a EventGroup.
     */
    data: XOR<EventGroupUpdateInput, EventGroupUncheckedUpdateInput>
    /**
     * Choose, which EventGroup to update.
     */
    where: EventGroupWhereUniqueInput
  }


  /**
   * EventGroup updateMany
   */
  export type EventGroupUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EventGroups.
     */
    data: XOR<EventGroupUpdateManyMutationInput, EventGroupUncheckedUpdateManyInput>
    /**
     * Filter which EventGroups to update
     */
    where?: EventGroupWhereInput
  }


  /**
   * EventGroup upsert
   */
  export type EventGroupUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventGroup
     */
    select?: EventGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventGroupInclude<ExtArgs> | null
    /**
     * The filter to search for the EventGroup to update in case it exists.
     */
    where: EventGroupWhereUniqueInput
    /**
     * In case the EventGroup found by the `where` argument doesn't exist, create a new EventGroup with this data.
     */
    create: XOR<EventGroupCreateInput, EventGroupUncheckedCreateInput>
    /**
     * In case the EventGroup was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventGroupUpdateInput, EventGroupUncheckedUpdateInput>
  }


  /**
   * EventGroup delete
   */
  export type EventGroupDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventGroup
     */
    select?: EventGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventGroupInclude<ExtArgs> | null
    /**
     * Filter which EventGroup to delete.
     */
    where: EventGroupWhereUniqueInput
  }


  /**
   * EventGroup deleteMany
   */
  export type EventGroupDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventGroups to delete
     */
    where?: EventGroupWhereInput
  }


  /**
   * EventGroup.event
   */
  export type EventGroup$eventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
  }


  /**
   * EventGroup.EventPeople
   */
  export type EventGroup$EventPeopleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPeople
     */
    select?: EventPeopleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventPeopleInclude<ExtArgs> | null
    where?: EventPeopleWhereInput
    orderBy?: EventPeopleOrderByWithRelationInput | EventPeopleOrderByWithRelationInput[]
    cursor?: EventPeopleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventPeopleScalarFieldEnum | EventPeopleScalarFieldEnum[]
  }


  /**
   * EventGroup without action
   */
  export type EventGroupDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventGroup
     */
    select?: EventGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventGroupInclude<ExtArgs> | null
  }



  /**
   * Model EventPeople
   */

  export type AggregateEventPeople = {
    _count: EventPeopleCountAggregateOutputType | null
    _avg: EventPeopleAvgAggregateOutputType | null
    _sum: EventPeopleSumAggregateOutputType | null
    _min: EventPeopleMinAggregateOutputType | null
    _max: EventPeopleMaxAggregateOutputType | null
  }

  export type EventPeopleAvgAggregateOutputType = {
    id: number | null
    id_event: number | null
    id_group: number | null
  }

  export type EventPeopleSumAggregateOutputType = {
    id: number | null
    id_event: number | null
    id_group: number | null
  }

  export type EventPeopleMinAggregateOutputType = {
    id: number | null
    id_event: number | null
    id_group: number | null
    name: string | null
    cpf: string | null
    matched: string | null
  }

  export type EventPeopleMaxAggregateOutputType = {
    id: number | null
    id_event: number | null
    id_group: number | null
    name: string | null
    cpf: string | null
    matched: string | null
  }

  export type EventPeopleCountAggregateOutputType = {
    id: number
    id_event: number
    id_group: number
    name: number
    cpf: number
    matched: number
    _all: number
  }


  export type EventPeopleAvgAggregateInputType = {
    id?: true
    id_event?: true
    id_group?: true
  }

  export type EventPeopleSumAggregateInputType = {
    id?: true
    id_event?: true
    id_group?: true
  }

  export type EventPeopleMinAggregateInputType = {
    id?: true
    id_event?: true
    id_group?: true
    name?: true
    cpf?: true
    matched?: true
  }

  export type EventPeopleMaxAggregateInputType = {
    id?: true
    id_event?: true
    id_group?: true
    name?: true
    cpf?: true
    matched?: true
  }

  export type EventPeopleCountAggregateInputType = {
    id?: true
    id_event?: true
    id_group?: true
    name?: true
    cpf?: true
    matched?: true
    _all?: true
  }

  export type EventPeopleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventPeople to aggregate.
     */
    where?: EventPeopleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventPeople to fetch.
     */
    orderBy?: EventPeopleOrderByWithRelationInput | EventPeopleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventPeopleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventPeople from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventPeople.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventPeople
    **/
    _count?: true | EventPeopleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventPeopleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventPeopleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventPeopleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventPeopleMaxAggregateInputType
  }

  export type GetEventPeopleAggregateType<T extends EventPeopleAggregateArgs> = {
        [P in keyof T & keyof AggregateEventPeople]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventPeople[P]>
      : GetScalarType<T[P], AggregateEventPeople[P]>
  }




  export type EventPeopleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventPeopleWhereInput
    orderBy?: EventPeopleOrderByWithAggregationInput | EventPeopleOrderByWithAggregationInput[]
    by: EventPeopleScalarFieldEnum[] | EventPeopleScalarFieldEnum
    having?: EventPeopleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventPeopleCountAggregateInputType | true
    _avg?: EventPeopleAvgAggregateInputType
    _sum?: EventPeopleSumAggregateInputType
    _min?: EventPeopleMinAggregateInputType
    _max?: EventPeopleMaxAggregateInputType
  }

  export type EventPeopleGroupByOutputType = {
    id: number
    id_event: number
    id_group: number
    name: string
    cpf: string
    matched: string
    _count: EventPeopleCountAggregateOutputType | null
    _avg: EventPeopleAvgAggregateOutputType | null
    _sum: EventPeopleSumAggregateOutputType | null
    _min: EventPeopleMinAggregateOutputType | null
    _max: EventPeopleMaxAggregateOutputType | null
  }

  type GetEventPeopleGroupByPayload<T extends EventPeopleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventPeopleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventPeopleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventPeopleGroupByOutputType[P]>
            : GetScalarType<T[P], EventPeopleGroupByOutputType[P]>
        }
      >
    >


  export type EventPeopleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_event?: boolean
    id_group?: boolean
    name?: boolean
    cpf?: boolean
    matched?: boolean
    event?: boolean | EventPeople$eventArgs<ExtArgs>
    group?: boolean | EventPeople$groupArgs<ExtArgs>
  }, ExtArgs["result"]["eventPeople"]>

  export type EventPeopleSelectScalar = {
    id?: boolean
    id_event?: boolean
    id_group?: boolean
    name?: boolean
    cpf?: boolean
    matched?: boolean
  }

  export type EventPeopleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventPeople$eventArgs<ExtArgs>
    group?: boolean | EventPeople$groupArgs<ExtArgs>
  }


  export type $EventPeoplePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EventPeople"
    objects: {
      event: Prisma.$EventPayload<ExtArgs> | null
      group: Prisma.$EventGroupPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      id_event: number
      id_group: number
      name: string
      cpf: string
      matched: string
    }, ExtArgs["result"]["eventPeople"]>
    composites: {}
  }


  type EventPeopleGetPayload<S extends boolean | null | undefined | EventPeopleDefaultArgs> = $Result.GetResult<Prisma.$EventPeoplePayload, S>

  type EventPeopleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventPeopleFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: EventPeopleCountAggregateInputType | true
    }

  export interface EventPeopleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventPeople'], meta: { name: 'EventPeople' } }
    /**
     * Find zero or one EventPeople that matches the filter.
     * @param {EventPeopleFindUniqueArgs} args - Arguments to find a EventPeople
     * @example
     * // Get one EventPeople
     * const eventPeople = await prisma.eventPeople.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EventPeopleFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EventPeopleFindUniqueArgs<ExtArgs>>
    ): Prisma__EventPeopleClient<$Result.GetResult<Prisma.$EventPeoplePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one EventPeople that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EventPeopleFindUniqueOrThrowArgs} args - Arguments to find a EventPeople
     * @example
     * // Get one EventPeople
     * const eventPeople = await prisma.eventPeople.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EventPeopleFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EventPeopleFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EventPeopleClient<$Result.GetResult<Prisma.$EventPeoplePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first EventPeople that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventPeopleFindFirstArgs} args - Arguments to find a EventPeople
     * @example
     * // Get one EventPeople
     * const eventPeople = await prisma.eventPeople.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EventPeopleFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EventPeopleFindFirstArgs<ExtArgs>>
    ): Prisma__EventPeopleClient<$Result.GetResult<Prisma.$EventPeoplePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first EventPeople that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventPeopleFindFirstOrThrowArgs} args - Arguments to find a EventPeople
     * @example
     * // Get one EventPeople
     * const eventPeople = await prisma.eventPeople.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EventPeopleFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EventPeopleFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EventPeopleClient<$Result.GetResult<Prisma.$EventPeoplePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more EventPeople that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventPeopleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventPeople
     * const eventPeople = await prisma.eventPeople.findMany()
     * 
     * // Get first 10 EventPeople
     * const eventPeople = await prisma.eventPeople.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventPeopleWithIdOnly = await prisma.eventPeople.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EventPeopleFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventPeopleFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPeoplePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a EventPeople.
     * @param {EventPeopleCreateArgs} args - Arguments to create a EventPeople.
     * @example
     * // Create one EventPeople
     * const EventPeople = await prisma.eventPeople.create({
     *   data: {
     *     // ... data to create a EventPeople
     *   }
     * })
     * 
    **/
    create<T extends EventPeopleCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EventPeopleCreateArgs<ExtArgs>>
    ): Prisma__EventPeopleClient<$Result.GetResult<Prisma.$EventPeoplePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many EventPeople.
     *     @param {EventPeopleCreateManyArgs} args - Arguments to create many EventPeople.
     *     @example
     *     // Create many EventPeople
     *     const eventPeople = await prisma.eventPeople.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EventPeopleCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventPeopleCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EventPeople.
     * @param {EventPeopleDeleteArgs} args - Arguments to delete one EventPeople.
     * @example
     * // Delete one EventPeople
     * const EventPeople = await prisma.eventPeople.delete({
     *   where: {
     *     // ... filter to delete one EventPeople
     *   }
     * })
     * 
    **/
    delete<T extends EventPeopleDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EventPeopleDeleteArgs<ExtArgs>>
    ): Prisma__EventPeopleClient<$Result.GetResult<Prisma.$EventPeoplePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one EventPeople.
     * @param {EventPeopleUpdateArgs} args - Arguments to update one EventPeople.
     * @example
     * // Update one EventPeople
     * const eventPeople = await prisma.eventPeople.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EventPeopleUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EventPeopleUpdateArgs<ExtArgs>>
    ): Prisma__EventPeopleClient<$Result.GetResult<Prisma.$EventPeoplePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more EventPeople.
     * @param {EventPeopleDeleteManyArgs} args - Arguments to filter EventPeople to delete.
     * @example
     * // Delete a few EventPeople
     * const { count } = await prisma.eventPeople.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EventPeopleDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventPeopleDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventPeople.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventPeopleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventPeople
     * const eventPeople = await prisma.eventPeople.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EventPeopleUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EventPeopleUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EventPeople.
     * @param {EventPeopleUpsertArgs} args - Arguments to update or create a EventPeople.
     * @example
     * // Update or create a EventPeople
     * const eventPeople = await prisma.eventPeople.upsert({
     *   create: {
     *     // ... data to create a EventPeople
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventPeople we want to update
     *   }
     * })
    **/
    upsert<T extends EventPeopleUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EventPeopleUpsertArgs<ExtArgs>>
    ): Prisma__EventPeopleClient<$Result.GetResult<Prisma.$EventPeoplePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of EventPeople.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventPeopleCountArgs} args - Arguments to filter EventPeople to count.
     * @example
     * // Count the number of EventPeople
     * const count = await prisma.eventPeople.count({
     *   where: {
     *     // ... the filter for the EventPeople we want to count
     *   }
     * })
    **/
    count<T extends EventPeopleCountArgs>(
      args?: Subset<T, EventPeopleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventPeopleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventPeople.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventPeopleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventPeopleAggregateArgs>(args: Subset<T, EventPeopleAggregateArgs>): Prisma.PrismaPromise<GetEventPeopleAggregateType<T>>

    /**
     * Group by EventPeople.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventPeopleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventPeopleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventPeopleGroupByArgs['orderBy'] }
        : { orderBy?: EventPeopleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventPeopleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventPeopleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EventPeople model
   */
  readonly fields: EventPeopleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventPeople.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventPeopleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    event<T extends EventPeople$eventArgs<ExtArgs> = {}>(args?: Subset<T, EventPeople$eventArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    group<T extends EventPeople$groupArgs<ExtArgs> = {}>(args?: Subset<T, EventPeople$groupArgs<ExtArgs>>): Prisma__EventGroupClient<$Result.GetResult<Prisma.$EventGroupPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the EventPeople model
   */ 
  interface EventPeopleFieldRefs {
    readonly id: FieldRef<"EventPeople", 'Int'>
    readonly id_event: FieldRef<"EventPeople", 'Int'>
    readonly id_group: FieldRef<"EventPeople", 'Int'>
    readonly name: FieldRef<"EventPeople", 'String'>
    readonly cpf: FieldRef<"EventPeople", 'String'>
    readonly matched: FieldRef<"EventPeople", 'String'>
  }
    

  // Custom InputTypes

  /**
   * EventPeople findUnique
   */
  export type EventPeopleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPeople
     */
    select?: EventPeopleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventPeopleInclude<ExtArgs> | null
    /**
     * Filter, which EventPeople to fetch.
     */
    where: EventPeopleWhereUniqueInput
  }


  /**
   * EventPeople findUniqueOrThrow
   */
  export type EventPeopleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPeople
     */
    select?: EventPeopleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventPeopleInclude<ExtArgs> | null
    /**
     * Filter, which EventPeople to fetch.
     */
    where: EventPeopleWhereUniqueInput
  }


  /**
   * EventPeople findFirst
   */
  export type EventPeopleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPeople
     */
    select?: EventPeopleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventPeopleInclude<ExtArgs> | null
    /**
     * Filter, which EventPeople to fetch.
     */
    where?: EventPeopleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventPeople to fetch.
     */
    orderBy?: EventPeopleOrderByWithRelationInput | EventPeopleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventPeople.
     */
    cursor?: EventPeopleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventPeople from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventPeople.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventPeople.
     */
    distinct?: EventPeopleScalarFieldEnum | EventPeopleScalarFieldEnum[]
  }


  /**
   * EventPeople findFirstOrThrow
   */
  export type EventPeopleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPeople
     */
    select?: EventPeopleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventPeopleInclude<ExtArgs> | null
    /**
     * Filter, which EventPeople to fetch.
     */
    where?: EventPeopleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventPeople to fetch.
     */
    orderBy?: EventPeopleOrderByWithRelationInput | EventPeopleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventPeople.
     */
    cursor?: EventPeopleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventPeople from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventPeople.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventPeople.
     */
    distinct?: EventPeopleScalarFieldEnum | EventPeopleScalarFieldEnum[]
  }


  /**
   * EventPeople findMany
   */
  export type EventPeopleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPeople
     */
    select?: EventPeopleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventPeopleInclude<ExtArgs> | null
    /**
     * Filter, which EventPeople to fetch.
     */
    where?: EventPeopleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventPeople to fetch.
     */
    orderBy?: EventPeopleOrderByWithRelationInput | EventPeopleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventPeople.
     */
    cursor?: EventPeopleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventPeople from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventPeople.
     */
    skip?: number
    distinct?: EventPeopleScalarFieldEnum | EventPeopleScalarFieldEnum[]
  }


  /**
   * EventPeople create
   */
  export type EventPeopleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPeople
     */
    select?: EventPeopleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventPeopleInclude<ExtArgs> | null
    /**
     * The data needed to create a EventPeople.
     */
    data: XOR<EventPeopleCreateInput, EventPeopleUncheckedCreateInput>
  }


  /**
   * EventPeople createMany
   */
  export type EventPeopleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EventPeople.
     */
    data: EventPeopleCreateManyInput | EventPeopleCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * EventPeople update
   */
  export type EventPeopleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPeople
     */
    select?: EventPeopleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventPeopleInclude<ExtArgs> | null
    /**
     * The data needed to update a EventPeople.
     */
    data: XOR<EventPeopleUpdateInput, EventPeopleUncheckedUpdateInput>
    /**
     * Choose, which EventPeople to update.
     */
    where: EventPeopleWhereUniqueInput
  }


  /**
   * EventPeople updateMany
   */
  export type EventPeopleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EventPeople.
     */
    data: XOR<EventPeopleUpdateManyMutationInput, EventPeopleUncheckedUpdateManyInput>
    /**
     * Filter which EventPeople to update
     */
    where?: EventPeopleWhereInput
  }


  /**
   * EventPeople upsert
   */
  export type EventPeopleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPeople
     */
    select?: EventPeopleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventPeopleInclude<ExtArgs> | null
    /**
     * The filter to search for the EventPeople to update in case it exists.
     */
    where: EventPeopleWhereUniqueInput
    /**
     * In case the EventPeople found by the `where` argument doesn't exist, create a new EventPeople with this data.
     */
    create: XOR<EventPeopleCreateInput, EventPeopleUncheckedCreateInput>
    /**
     * In case the EventPeople was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventPeopleUpdateInput, EventPeopleUncheckedUpdateInput>
  }


  /**
   * EventPeople delete
   */
  export type EventPeopleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPeople
     */
    select?: EventPeopleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventPeopleInclude<ExtArgs> | null
    /**
     * Filter which EventPeople to delete.
     */
    where: EventPeopleWhereUniqueInput
  }


  /**
   * EventPeople deleteMany
   */
  export type EventPeopleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventPeople to delete
     */
    where?: EventPeopleWhereInput
  }


  /**
   * EventPeople.event
   */
  export type EventPeople$eventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
  }


  /**
   * EventPeople.group
   */
  export type EventPeople$groupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventGroup
     */
    select?: EventGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventGroupInclude<ExtArgs> | null
    where?: EventGroupWhereInput
  }


  /**
   * EventPeople without action
   */
  export type EventPeopleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPeople
     */
    select?: EventPeopleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventPeopleInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const EventScalarFieldEnum: {
    id: 'id',
    status: 'status',
    title: 'title',
    description: 'description',
    grouped: 'grouped'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const EventGroupScalarFieldEnum: {
    id: 'id',
    id_event: 'id_event',
    name: 'name'
  };

  export type EventGroupScalarFieldEnum = (typeof EventGroupScalarFieldEnum)[keyof typeof EventGroupScalarFieldEnum]


  export const EventPeopleScalarFieldEnum: {
    id: 'id',
    id_event: 'id_event',
    id_group: 'id_group',
    name: 'name',
    cpf: 'cpf',
    matched: 'matched'
  };

  export type EventPeopleScalarFieldEnum = (typeof EventPeopleScalarFieldEnum)[keyof typeof EventPeopleScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type EventWhereInput = {
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    id?: IntFilter<"Event"> | number
    status?: BoolFilter<"Event"> | boolean
    title?: StringFilter<"Event"> | string
    description?: StringFilter<"Event"> | string
    grouped?: BoolFilter<"Event"> | boolean
    EventGroup?: EventGroupListRelationFilter
    EventPeople?: EventPeopleListRelationFilter
  }

  export type EventOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    title?: SortOrder
    description?: SortOrder
    grouped?: SortOrder
    EventGroup?: EventGroupOrderByRelationAggregateInput
    EventPeople?: EventPeopleOrderByRelationAggregateInput
  }

  export type EventWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    status?: BoolFilter<"Event"> | boolean
    title?: StringFilter<"Event"> | string
    description?: StringFilter<"Event"> | string
    grouped?: BoolFilter<"Event"> | boolean
    EventGroup?: EventGroupListRelationFilter
    EventPeople?: EventPeopleListRelationFilter
  }, "id">

  export type EventOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    title?: SortOrder
    description?: SortOrder
    grouped?: SortOrder
    _count?: EventCountOrderByAggregateInput
    _avg?: EventAvgOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
    _sum?: EventSumOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    OR?: EventScalarWhereWithAggregatesInput[]
    NOT?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Event"> | number
    status?: BoolWithAggregatesFilter<"Event"> | boolean
    title?: StringWithAggregatesFilter<"Event"> | string
    description?: StringWithAggregatesFilter<"Event"> | string
    grouped?: BoolWithAggregatesFilter<"Event"> | boolean
  }

  export type EventGroupWhereInput = {
    AND?: EventGroupWhereInput | EventGroupWhereInput[]
    OR?: EventGroupWhereInput[]
    NOT?: EventGroupWhereInput | EventGroupWhereInput[]
    id?: IntFilter<"EventGroup"> | number
    id_event?: IntFilter<"EventGroup"> | number
    name?: StringFilter<"EventGroup"> | string
    event?: XOR<EventNullableRelationFilter, EventWhereInput> | null
    EventPeople?: EventPeopleListRelationFilter
  }

  export type EventGroupOrderByWithRelationInput = {
    id?: SortOrder
    id_event?: SortOrder
    name?: SortOrder
    event?: EventOrderByWithRelationInput
    EventPeople?: EventPeopleOrderByRelationAggregateInput
  }

  export type EventGroupWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EventGroupWhereInput | EventGroupWhereInput[]
    OR?: EventGroupWhereInput[]
    NOT?: EventGroupWhereInput | EventGroupWhereInput[]
    id_event?: IntFilter<"EventGroup"> | number
    name?: StringFilter<"EventGroup"> | string
    event?: XOR<EventNullableRelationFilter, EventWhereInput> | null
    EventPeople?: EventPeopleListRelationFilter
  }, "id">

  export type EventGroupOrderByWithAggregationInput = {
    id?: SortOrder
    id_event?: SortOrder
    name?: SortOrder
    _count?: EventGroupCountOrderByAggregateInput
    _avg?: EventGroupAvgOrderByAggregateInput
    _max?: EventGroupMaxOrderByAggregateInput
    _min?: EventGroupMinOrderByAggregateInput
    _sum?: EventGroupSumOrderByAggregateInput
  }

  export type EventGroupScalarWhereWithAggregatesInput = {
    AND?: EventGroupScalarWhereWithAggregatesInput | EventGroupScalarWhereWithAggregatesInput[]
    OR?: EventGroupScalarWhereWithAggregatesInput[]
    NOT?: EventGroupScalarWhereWithAggregatesInput | EventGroupScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"EventGroup"> | number
    id_event?: IntWithAggregatesFilter<"EventGroup"> | number
    name?: StringWithAggregatesFilter<"EventGroup"> | string
  }

  export type EventPeopleWhereInput = {
    AND?: EventPeopleWhereInput | EventPeopleWhereInput[]
    OR?: EventPeopleWhereInput[]
    NOT?: EventPeopleWhereInput | EventPeopleWhereInput[]
    id?: IntFilter<"EventPeople"> | number
    id_event?: IntFilter<"EventPeople"> | number
    id_group?: IntFilter<"EventPeople"> | number
    name?: StringFilter<"EventPeople"> | string
    cpf?: StringFilter<"EventPeople"> | string
    matched?: StringFilter<"EventPeople"> | string
    event?: XOR<EventNullableRelationFilter, EventWhereInput> | null
    group?: XOR<EventGroupNullableRelationFilter, EventGroupWhereInput> | null
  }

  export type EventPeopleOrderByWithRelationInput = {
    id?: SortOrder
    id_event?: SortOrder
    id_group?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    matched?: SortOrder
    event?: EventOrderByWithRelationInput
    group?: EventGroupOrderByWithRelationInput
  }

  export type EventPeopleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EventPeopleWhereInput | EventPeopleWhereInput[]
    OR?: EventPeopleWhereInput[]
    NOT?: EventPeopleWhereInput | EventPeopleWhereInput[]
    id_event?: IntFilter<"EventPeople"> | number
    id_group?: IntFilter<"EventPeople"> | number
    name?: StringFilter<"EventPeople"> | string
    cpf?: StringFilter<"EventPeople"> | string
    matched?: StringFilter<"EventPeople"> | string
    event?: XOR<EventNullableRelationFilter, EventWhereInput> | null
    group?: XOR<EventGroupNullableRelationFilter, EventGroupWhereInput> | null
  }, "id">

  export type EventPeopleOrderByWithAggregationInput = {
    id?: SortOrder
    id_event?: SortOrder
    id_group?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    matched?: SortOrder
    _count?: EventPeopleCountOrderByAggregateInput
    _avg?: EventPeopleAvgOrderByAggregateInput
    _max?: EventPeopleMaxOrderByAggregateInput
    _min?: EventPeopleMinOrderByAggregateInput
    _sum?: EventPeopleSumOrderByAggregateInput
  }

  export type EventPeopleScalarWhereWithAggregatesInput = {
    AND?: EventPeopleScalarWhereWithAggregatesInput | EventPeopleScalarWhereWithAggregatesInput[]
    OR?: EventPeopleScalarWhereWithAggregatesInput[]
    NOT?: EventPeopleScalarWhereWithAggregatesInput | EventPeopleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"EventPeople"> | number
    id_event?: IntWithAggregatesFilter<"EventPeople"> | number
    id_group?: IntWithAggregatesFilter<"EventPeople"> | number
    name?: StringWithAggregatesFilter<"EventPeople"> | string
    cpf?: StringWithAggregatesFilter<"EventPeople"> | string
    matched?: StringWithAggregatesFilter<"EventPeople"> | string
  }

  export type EventCreateInput = {
    status?: boolean
    title: string
    description: string
    grouped?: boolean
    EventGroup?: EventGroupCreateNestedManyWithoutEventInput
    EventPeople?: EventPeopleCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateInput = {
    id?: number
    status?: boolean
    title: string
    description: string
    grouped?: boolean
    EventGroup?: EventGroupUncheckedCreateNestedManyWithoutEventInput
    EventPeople?: EventPeopleUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventUpdateInput = {
    status?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    grouped?: BoolFieldUpdateOperationsInput | boolean
    EventGroup?: EventGroupUpdateManyWithoutEventNestedInput
    EventPeople?: EventPeopleUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    grouped?: BoolFieldUpdateOperationsInput | boolean
    EventGroup?: EventGroupUncheckedUpdateManyWithoutEventNestedInput
    EventPeople?: EventPeopleUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventCreateManyInput = {
    id?: number
    status?: boolean
    title: string
    description: string
    grouped?: boolean
  }

  export type EventUpdateManyMutationInput = {
    status?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    grouped?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EventUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    grouped?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EventGroupCreateInput = {
    name: string
    event?: EventCreateNestedOneWithoutEventGroupInput
    EventPeople?: EventPeopleCreateNestedManyWithoutGroupInput
  }

  export type EventGroupUncheckedCreateInput = {
    id?: number
    id_event: number
    name: string
    EventPeople?: EventPeopleUncheckedCreateNestedManyWithoutGroupInput
  }

  export type EventGroupUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    event?: EventUpdateOneWithoutEventGroupNestedInput
    EventPeople?: EventPeopleUpdateManyWithoutGroupNestedInput
  }

  export type EventGroupUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_event?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    EventPeople?: EventPeopleUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type EventGroupCreateManyInput = {
    id?: number
    id_event: number
    name: string
  }

  export type EventGroupUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type EventGroupUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_event?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type EventPeopleCreateInput = {
    name: string
    cpf: string
    matched?: string
    event?: EventCreateNestedOneWithoutEventPeopleInput
    group?: EventGroupCreateNestedOneWithoutEventPeopleInput
  }

  export type EventPeopleUncheckedCreateInput = {
    id?: number
    id_event: number
    id_group: number
    name: string
    cpf: string
    matched?: string
  }

  export type EventPeopleUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    matched?: StringFieldUpdateOperationsInput | string
    event?: EventUpdateOneWithoutEventPeopleNestedInput
    group?: EventGroupUpdateOneWithoutEventPeopleNestedInput
  }

  export type EventPeopleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_event?: IntFieldUpdateOperationsInput | number
    id_group?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    matched?: StringFieldUpdateOperationsInput | string
  }

  export type EventPeopleCreateManyInput = {
    id?: number
    id_event: number
    id_group: number
    name: string
    cpf: string
    matched?: string
  }

  export type EventPeopleUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    matched?: StringFieldUpdateOperationsInput | string
  }

  export type EventPeopleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_event?: IntFieldUpdateOperationsInput | number
    id_group?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    matched?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EventGroupListRelationFilter = {
    every?: EventGroupWhereInput
    some?: EventGroupWhereInput
    none?: EventGroupWhereInput
  }

  export type EventPeopleListRelationFilter = {
    every?: EventPeopleWhereInput
    some?: EventPeopleWhereInput
    none?: EventPeopleWhereInput
  }

  export type EventGroupOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventPeopleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    title?: SortOrder
    description?: SortOrder
    grouped?: SortOrder
  }

  export type EventAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    title?: SortOrder
    description?: SortOrder
    grouped?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    title?: SortOrder
    description?: SortOrder
    grouped?: SortOrder
  }

  export type EventSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EventNullableRelationFilter = {
    is?: EventWhereInput | null
    isNot?: EventWhereInput | null
  }

  export type EventGroupCountOrderByAggregateInput = {
    id?: SortOrder
    id_event?: SortOrder
    name?: SortOrder
  }

  export type EventGroupAvgOrderByAggregateInput = {
    id?: SortOrder
    id_event?: SortOrder
  }

  export type EventGroupMaxOrderByAggregateInput = {
    id?: SortOrder
    id_event?: SortOrder
    name?: SortOrder
  }

  export type EventGroupMinOrderByAggregateInput = {
    id?: SortOrder
    id_event?: SortOrder
    name?: SortOrder
  }

  export type EventGroupSumOrderByAggregateInput = {
    id?: SortOrder
    id_event?: SortOrder
  }

  export type EventGroupNullableRelationFilter = {
    is?: EventGroupWhereInput | null
    isNot?: EventGroupWhereInput | null
  }

  export type EventPeopleCountOrderByAggregateInput = {
    id?: SortOrder
    id_event?: SortOrder
    id_group?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    matched?: SortOrder
  }

  export type EventPeopleAvgOrderByAggregateInput = {
    id?: SortOrder
    id_event?: SortOrder
    id_group?: SortOrder
  }

  export type EventPeopleMaxOrderByAggregateInput = {
    id?: SortOrder
    id_event?: SortOrder
    id_group?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    matched?: SortOrder
  }

  export type EventPeopleMinOrderByAggregateInput = {
    id?: SortOrder
    id_event?: SortOrder
    id_group?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    matched?: SortOrder
  }

  export type EventPeopleSumOrderByAggregateInput = {
    id?: SortOrder
    id_event?: SortOrder
    id_group?: SortOrder
  }

  export type EventGroupCreateNestedManyWithoutEventInput = {
    create?: XOR<EventGroupCreateWithoutEventInput, EventGroupUncheckedCreateWithoutEventInput> | EventGroupCreateWithoutEventInput[] | EventGroupUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventGroupCreateOrConnectWithoutEventInput | EventGroupCreateOrConnectWithoutEventInput[]
    createMany?: EventGroupCreateManyEventInputEnvelope
    connect?: EventGroupWhereUniqueInput | EventGroupWhereUniqueInput[]
  }

  export type EventPeopleCreateNestedManyWithoutEventInput = {
    create?: XOR<EventPeopleCreateWithoutEventInput, EventPeopleUncheckedCreateWithoutEventInput> | EventPeopleCreateWithoutEventInput[] | EventPeopleUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventPeopleCreateOrConnectWithoutEventInput | EventPeopleCreateOrConnectWithoutEventInput[]
    createMany?: EventPeopleCreateManyEventInputEnvelope
    connect?: EventPeopleWhereUniqueInput | EventPeopleWhereUniqueInput[]
  }

  export type EventGroupUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<EventGroupCreateWithoutEventInput, EventGroupUncheckedCreateWithoutEventInput> | EventGroupCreateWithoutEventInput[] | EventGroupUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventGroupCreateOrConnectWithoutEventInput | EventGroupCreateOrConnectWithoutEventInput[]
    createMany?: EventGroupCreateManyEventInputEnvelope
    connect?: EventGroupWhereUniqueInput | EventGroupWhereUniqueInput[]
  }

  export type EventPeopleUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<EventPeopleCreateWithoutEventInput, EventPeopleUncheckedCreateWithoutEventInput> | EventPeopleCreateWithoutEventInput[] | EventPeopleUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventPeopleCreateOrConnectWithoutEventInput | EventPeopleCreateOrConnectWithoutEventInput[]
    createMany?: EventPeopleCreateManyEventInputEnvelope
    connect?: EventPeopleWhereUniqueInput | EventPeopleWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EventGroupUpdateManyWithoutEventNestedInput = {
    create?: XOR<EventGroupCreateWithoutEventInput, EventGroupUncheckedCreateWithoutEventInput> | EventGroupCreateWithoutEventInput[] | EventGroupUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventGroupCreateOrConnectWithoutEventInput | EventGroupCreateOrConnectWithoutEventInput[]
    upsert?: EventGroupUpsertWithWhereUniqueWithoutEventInput | EventGroupUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EventGroupCreateManyEventInputEnvelope
    set?: EventGroupWhereUniqueInput | EventGroupWhereUniqueInput[]
    disconnect?: EventGroupWhereUniqueInput | EventGroupWhereUniqueInput[]
    delete?: EventGroupWhereUniqueInput | EventGroupWhereUniqueInput[]
    connect?: EventGroupWhereUniqueInput | EventGroupWhereUniqueInput[]
    update?: EventGroupUpdateWithWhereUniqueWithoutEventInput | EventGroupUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EventGroupUpdateManyWithWhereWithoutEventInput | EventGroupUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EventGroupScalarWhereInput | EventGroupScalarWhereInput[]
  }

  export type EventPeopleUpdateManyWithoutEventNestedInput = {
    create?: XOR<EventPeopleCreateWithoutEventInput, EventPeopleUncheckedCreateWithoutEventInput> | EventPeopleCreateWithoutEventInput[] | EventPeopleUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventPeopleCreateOrConnectWithoutEventInput | EventPeopleCreateOrConnectWithoutEventInput[]
    upsert?: EventPeopleUpsertWithWhereUniqueWithoutEventInput | EventPeopleUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EventPeopleCreateManyEventInputEnvelope
    set?: EventPeopleWhereUniqueInput | EventPeopleWhereUniqueInput[]
    disconnect?: EventPeopleWhereUniqueInput | EventPeopleWhereUniqueInput[]
    delete?: EventPeopleWhereUniqueInput | EventPeopleWhereUniqueInput[]
    connect?: EventPeopleWhereUniqueInput | EventPeopleWhereUniqueInput[]
    update?: EventPeopleUpdateWithWhereUniqueWithoutEventInput | EventPeopleUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EventPeopleUpdateManyWithWhereWithoutEventInput | EventPeopleUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EventPeopleScalarWhereInput | EventPeopleScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EventGroupUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<EventGroupCreateWithoutEventInput, EventGroupUncheckedCreateWithoutEventInput> | EventGroupCreateWithoutEventInput[] | EventGroupUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventGroupCreateOrConnectWithoutEventInput | EventGroupCreateOrConnectWithoutEventInput[]
    upsert?: EventGroupUpsertWithWhereUniqueWithoutEventInput | EventGroupUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EventGroupCreateManyEventInputEnvelope
    set?: EventGroupWhereUniqueInput | EventGroupWhereUniqueInput[]
    disconnect?: EventGroupWhereUniqueInput | EventGroupWhereUniqueInput[]
    delete?: EventGroupWhereUniqueInput | EventGroupWhereUniqueInput[]
    connect?: EventGroupWhereUniqueInput | EventGroupWhereUniqueInput[]
    update?: EventGroupUpdateWithWhereUniqueWithoutEventInput | EventGroupUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EventGroupUpdateManyWithWhereWithoutEventInput | EventGroupUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EventGroupScalarWhereInput | EventGroupScalarWhereInput[]
  }

  export type EventPeopleUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<EventPeopleCreateWithoutEventInput, EventPeopleUncheckedCreateWithoutEventInput> | EventPeopleCreateWithoutEventInput[] | EventPeopleUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventPeopleCreateOrConnectWithoutEventInput | EventPeopleCreateOrConnectWithoutEventInput[]
    upsert?: EventPeopleUpsertWithWhereUniqueWithoutEventInput | EventPeopleUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EventPeopleCreateManyEventInputEnvelope
    set?: EventPeopleWhereUniqueInput | EventPeopleWhereUniqueInput[]
    disconnect?: EventPeopleWhereUniqueInput | EventPeopleWhereUniqueInput[]
    delete?: EventPeopleWhereUniqueInput | EventPeopleWhereUniqueInput[]
    connect?: EventPeopleWhereUniqueInput | EventPeopleWhereUniqueInput[]
    update?: EventPeopleUpdateWithWhereUniqueWithoutEventInput | EventPeopleUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EventPeopleUpdateManyWithWhereWithoutEventInput | EventPeopleUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EventPeopleScalarWhereInput | EventPeopleScalarWhereInput[]
  }

  export type EventCreateNestedOneWithoutEventGroupInput = {
    create?: XOR<EventCreateWithoutEventGroupInput, EventUncheckedCreateWithoutEventGroupInput>
    connectOrCreate?: EventCreateOrConnectWithoutEventGroupInput
    connect?: EventWhereUniqueInput
  }

  export type EventPeopleCreateNestedManyWithoutGroupInput = {
    create?: XOR<EventPeopleCreateWithoutGroupInput, EventPeopleUncheckedCreateWithoutGroupInput> | EventPeopleCreateWithoutGroupInput[] | EventPeopleUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: EventPeopleCreateOrConnectWithoutGroupInput | EventPeopleCreateOrConnectWithoutGroupInput[]
    createMany?: EventPeopleCreateManyGroupInputEnvelope
    connect?: EventPeopleWhereUniqueInput | EventPeopleWhereUniqueInput[]
  }

  export type EventPeopleUncheckedCreateNestedManyWithoutGroupInput = {
    create?: XOR<EventPeopleCreateWithoutGroupInput, EventPeopleUncheckedCreateWithoutGroupInput> | EventPeopleCreateWithoutGroupInput[] | EventPeopleUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: EventPeopleCreateOrConnectWithoutGroupInput | EventPeopleCreateOrConnectWithoutGroupInput[]
    createMany?: EventPeopleCreateManyGroupInputEnvelope
    connect?: EventPeopleWhereUniqueInput | EventPeopleWhereUniqueInput[]
  }

  export type EventUpdateOneWithoutEventGroupNestedInput = {
    create?: XOR<EventCreateWithoutEventGroupInput, EventUncheckedCreateWithoutEventGroupInput>
    connectOrCreate?: EventCreateOrConnectWithoutEventGroupInput
    upsert?: EventUpsertWithoutEventGroupInput
    disconnect?: EventWhereInput | boolean
    delete?: EventWhereInput | boolean
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutEventGroupInput, EventUpdateWithoutEventGroupInput>, EventUncheckedUpdateWithoutEventGroupInput>
  }

  export type EventPeopleUpdateManyWithoutGroupNestedInput = {
    create?: XOR<EventPeopleCreateWithoutGroupInput, EventPeopleUncheckedCreateWithoutGroupInput> | EventPeopleCreateWithoutGroupInput[] | EventPeopleUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: EventPeopleCreateOrConnectWithoutGroupInput | EventPeopleCreateOrConnectWithoutGroupInput[]
    upsert?: EventPeopleUpsertWithWhereUniqueWithoutGroupInput | EventPeopleUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: EventPeopleCreateManyGroupInputEnvelope
    set?: EventPeopleWhereUniqueInput | EventPeopleWhereUniqueInput[]
    disconnect?: EventPeopleWhereUniqueInput | EventPeopleWhereUniqueInput[]
    delete?: EventPeopleWhereUniqueInput | EventPeopleWhereUniqueInput[]
    connect?: EventPeopleWhereUniqueInput | EventPeopleWhereUniqueInput[]
    update?: EventPeopleUpdateWithWhereUniqueWithoutGroupInput | EventPeopleUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: EventPeopleUpdateManyWithWhereWithoutGroupInput | EventPeopleUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: EventPeopleScalarWhereInput | EventPeopleScalarWhereInput[]
  }

  export type EventPeopleUncheckedUpdateManyWithoutGroupNestedInput = {
    create?: XOR<EventPeopleCreateWithoutGroupInput, EventPeopleUncheckedCreateWithoutGroupInput> | EventPeopleCreateWithoutGroupInput[] | EventPeopleUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: EventPeopleCreateOrConnectWithoutGroupInput | EventPeopleCreateOrConnectWithoutGroupInput[]
    upsert?: EventPeopleUpsertWithWhereUniqueWithoutGroupInput | EventPeopleUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: EventPeopleCreateManyGroupInputEnvelope
    set?: EventPeopleWhereUniqueInput | EventPeopleWhereUniqueInput[]
    disconnect?: EventPeopleWhereUniqueInput | EventPeopleWhereUniqueInput[]
    delete?: EventPeopleWhereUniqueInput | EventPeopleWhereUniqueInput[]
    connect?: EventPeopleWhereUniqueInput | EventPeopleWhereUniqueInput[]
    update?: EventPeopleUpdateWithWhereUniqueWithoutGroupInput | EventPeopleUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: EventPeopleUpdateManyWithWhereWithoutGroupInput | EventPeopleUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: EventPeopleScalarWhereInput | EventPeopleScalarWhereInput[]
  }

  export type EventCreateNestedOneWithoutEventPeopleInput = {
    create?: XOR<EventCreateWithoutEventPeopleInput, EventUncheckedCreateWithoutEventPeopleInput>
    connectOrCreate?: EventCreateOrConnectWithoutEventPeopleInput
    connect?: EventWhereUniqueInput
  }

  export type EventGroupCreateNestedOneWithoutEventPeopleInput = {
    create?: XOR<EventGroupCreateWithoutEventPeopleInput, EventGroupUncheckedCreateWithoutEventPeopleInput>
    connectOrCreate?: EventGroupCreateOrConnectWithoutEventPeopleInput
    connect?: EventGroupWhereUniqueInput
  }

  export type EventUpdateOneWithoutEventPeopleNestedInput = {
    create?: XOR<EventCreateWithoutEventPeopleInput, EventUncheckedCreateWithoutEventPeopleInput>
    connectOrCreate?: EventCreateOrConnectWithoutEventPeopleInput
    upsert?: EventUpsertWithoutEventPeopleInput
    disconnect?: EventWhereInput | boolean
    delete?: EventWhereInput | boolean
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutEventPeopleInput, EventUpdateWithoutEventPeopleInput>, EventUncheckedUpdateWithoutEventPeopleInput>
  }

  export type EventGroupUpdateOneWithoutEventPeopleNestedInput = {
    create?: XOR<EventGroupCreateWithoutEventPeopleInput, EventGroupUncheckedCreateWithoutEventPeopleInput>
    connectOrCreate?: EventGroupCreateOrConnectWithoutEventPeopleInput
    upsert?: EventGroupUpsertWithoutEventPeopleInput
    disconnect?: EventGroupWhereInput | boolean
    delete?: EventGroupWhereInput | boolean
    connect?: EventGroupWhereUniqueInput
    update?: XOR<XOR<EventGroupUpdateToOneWithWhereWithoutEventPeopleInput, EventGroupUpdateWithoutEventPeopleInput>, EventGroupUncheckedUpdateWithoutEventPeopleInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EventGroupCreateWithoutEventInput = {
    name: string
    EventPeople?: EventPeopleCreateNestedManyWithoutGroupInput
  }

  export type EventGroupUncheckedCreateWithoutEventInput = {
    id?: number
    name: string
    EventPeople?: EventPeopleUncheckedCreateNestedManyWithoutGroupInput
  }

  export type EventGroupCreateOrConnectWithoutEventInput = {
    where: EventGroupWhereUniqueInput
    create: XOR<EventGroupCreateWithoutEventInput, EventGroupUncheckedCreateWithoutEventInput>
  }

  export type EventGroupCreateManyEventInputEnvelope = {
    data: EventGroupCreateManyEventInput | EventGroupCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type EventPeopleCreateWithoutEventInput = {
    name: string
    cpf: string
    matched?: string
    group?: EventGroupCreateNestedOneWithoutEventPeopleInput
  }

  export type EventPeopleUncheckedCreateWithoutEventInput = {
    id?: number
    id_group: number
    name: string
    cpf: string
    matched?: string
  }

  export type EventPeopleCreateOrConnectWithoutEventInput = {
    where: EventPeopleWhereUniqueInput
    create: XOR<EventPeopleCreateWithoutEventInput, EventPeopleUncheckedCreateWithoutEventInput>
  }

  export type EventPeopleCreateManyEventInputEnvelope = {
    data: EventPeopleCreateManyEventInput | EventPeopleCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type EventGroupUpsertWithWhereUniqueWithoutEventInput = {
    where: EventGroupWhereUniqueInput
    update: XOR<EventGroupUpdateWithoutEventInput, EventGroupUncheckedUpdateWithoutEventInput>
    create: XOR<EventGroupCreateWithoutEventInput, EventGroupUncheckedCreateWithoutEventInput>
  }

  export type EventGroupUpdateWithWhereUniqueWithoutEventInput = {
    where: EventGroupWhereUniqueInput
    data: XOR<EventGroupUpdateWithoutEventInput, EventGroupUncheckedUpdateWithoutEventInput>
  }

  export type EventGroupUpdateManyWithWhereWithoutEventInput = {
    where: EventGroupScalarWhereInput
    data: XOR<EventGroupUpdateManyMutationInput, EventGroupUncheckedUpdateManyWithoutEventInput>
  }

  export type EventGroupScalarWhereInput = {
    AND?: EventGroupScalarWhereInput | EventGroupScalarWhereInput[]
    OR?: EventGroupScalarWhereInput[]
    NOT?: EventGroupScalarWhereInput | EventGroupScalarWhereInput[]
    id?: IntFilter<"EventGroup"> | number
    id_event?: IntFilter<"EventGroup"> | number
    name?: StringFilter<"EventGroup"> | string
  }

  export type EventPeopleUpsertWithWhereUniqueWithoutEventInput = {
    where: EventPeopleWhereUniqueInput
    update: XOR<EventPeopleUpdateWithoutEventInput, EventPeopleUncheckedUpdateWithoutEventInput>
    create: XOR<EventPeopleCreateWithoutEventInput, EventPeopleUncheckedCreateWithoutEventInput>
  }

  export type EventPeopleUpdateWithWhereUniqueWithoutEventInput = {
    where: EventPeopleWhereUniqueInput
    data: XOR<EventPeopleUpdateWithoutEventInput, EventPeopleUncheckedUpdateWithoutEventInput>
  }

  export type EventPeopleUpdateManyWithWhereWithoutEventInput = {
    where: EventPeopleScalarWhereInput
    data: XOR<EventPeopleUpdateManyMutationInput, EventPeopleUncheckedUpdateManyWithoutEventInput>
  }

  export type EventPeopleScalarWhereInput = {
    AND?: EventPeopleScalarWhereInput | EventPeopleScalarWhereInput[]
    OR?: EventPeopleScalarWhereInput[]
    NOT?: EventPeopleScalarWhereInput | EventPeopleScalarWhereInput[]
    id?: IntFilter<"EventPeople"> | number
    id_event?: IntFilter<"EventPeople"> | number
    id_group?: IntFilter<"EventPeople"> | number
    name?: StringFilter<"EventPeople"> | string
    cpf?: StringFilter<"EventPeople"> | string
    matched?: StringFilter<"EventPeople"> | string
  }

  export type EventCreateWithoutEventGroupInput = {
    status?: boolean
    title: string
    description: string
    grouped?: boolean
    EventPeople?: EventPeopleCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutEventGroupInput = {
    id?: number
    status?: boolean
    title: string
    description: string
    grouped?: boolean
    EventPeople?: EventPeopleUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutEventGroupInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutEventGroupInput, EventUncheckedCreateWithoutEventGroupInput>
  }

  export type EventPeopleCreateWithoutGroupInput = {
    name: string
    cpf: string
    matched?: string
    event?: EventCreateNestedOneWithoutEventPeopleInput
  }

  export type EventPeopleUncheckedCreateWithoutGroupInput = {
    id?: number
    id_event: number
    name: string
    cpf: string
    matched?: string
  }

  export type EventPeopleCreateOrConnectWithoutGroupInput = {
    where: EventPeopleWhereUniqueInput
    create: XOR<EventPeopleCreateWithoutGroupInput, EventPeopleUncheckedCreateWithoutGroupInput>
  }

  export type EventPeopleCreateManyGroupInputEnvelope = {
    data: EventPeopleCreateManyGroupInput | EventPeopleCreateManyGroupInput[]
    skipDuplicates?: boolean
  }

  export type EventUpsertWithoutEventGroupInput = {
    update: XOR<EventUpdateWithoutEventGroupInput, EventUncheckedUpdateWithoutEventGroupInput>
    create: XOR<EventCreateWithoutEventGroupInput, EventUncheckedCreateWithoutEventGroupInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutEventGroupInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutEventGroupInput, EventUncheckedUpdateWithoutEventGroupInput>
  }

  export type EventUpdateWithoutEventGroupInput = {
    status?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    grouped?: BoolFieldUpdateOperationsInput | boolean
    EventPeople?: EventPeopleUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutEventGroupInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    grouped?: BoolFieldUpdateOperationsInput | boolean
    EventPeople?: EventPeopleUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventPeopleUpsertWithWhereUniqueWithoutGroupInput = {
    where: EventPeopleWhereUniqueInput
    update: XOR<EventPeopleUpdateWithoutGroupInput, EventPeopleUncheckedUpdateWithoutGroupInput>
    create: XOR<EventPeopleCreateWithoutGroupInput, EventPeopleUncheckedCreateWithoutGroupInput>
  }

  export type EventPeopleUpdateWithWhereUniqueWithoutGroupInput = {
    where: EventPeopleWhereUniqueInput
    data: XOR<EventPeopleUpdateWithoutGroupInput, EventPeopleUncheckedUpdateWithoutGroupInput>
  }

  export type EventPeopleUpdateManyWithWhereWithoutGroupInput = {
    where: EventPeopleScalarWhereInput
    data: XOR<EventPeopleUpdateManyMutationInput, EventPeopleUncheckedUpdateManyWithoutGroupInput>
  }

  export type EventCreateWithoutEventPeopleInput = {
    status?: boolean
    title: string
    description: string
    grouped?: boolean
    EventGroup?: EventGroupCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutEventPeopleInput = {
    id?: number
    status?: boolean
    title: string
    description: string
    grouped?: boolean
    EventGroup?: EventGroupUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutEventPeopleInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutEventPeopleInput, EventUncheckedCreateWithoutEventPeopleInput>
  }

  export type EventGroupCreateWithoutEventPeopleInput = {
    name: string
    event?: EventCreateNestedOneWithoutEventGroupInput
  }

  export type EventGroupUncheckedCreateWithoutEventPeopleInput = {
    id?: number
    id_event: number
    name: string
  }

  export type EventGroupCreateOrConnectWithoutEventPeopleInput = {
    where: EventGroupWhereUniqueInput
    create: XOR<EventGroupCreateWithoutEventPeopleInput, EventGroupUncheckedCreateWithoutEventPeopleInput>
  }

  export type EventUpsertWithoutEventPeopleInput = {
    update: XOR<EventUpdateWithoutEventPeopleInput, EventUncheckedUpdateWithoutEventPeopleInput>
    create: XOR<EventCreateWithoutEventPeopleInput, EventUncheckedCreateWithoutEventPeopleInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutEventPeopleInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutEventPeopleInput, EventUncheckedUpdateWithoutEventPeopleInput>
  }

  export type EventUpdateWithoutEventPeopleInput = {
    status?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    grouped?: BoolFieldUpdateOperationsInput | boolean
    EventGroup?: EventGroupUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutEventPeopleInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    grouped?: BoolFieldUpdateOperationsInput | boolean
    EventGroup?: EventGroupUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventGroupUpsertWithoutEventPeopleInput = {
    update: XOR<EventGroupUpdateWithoutEventPeopleInput, EventGroupUncheckedUpdateWithoutEventPeopleInput>
    create: XOR<EventGroupCreateWithoutEventPeopleInput, EventGroupUncheckedCreateWithoutEventPeopleInput>
    where?: EventGroupWhereInput
  }

  export type EventGroupUpdateToOneWithWhereWithoutEventPeopleInput = {
    where?: EventGroupWhereInput
    data: XOR<EventGroupUpdateWithoutEventPeopleInput, EventGroupUncheckedUpdateWithoutEventPeopleInput>
  }

  export type EventGroupUpdateWithoutEventPeopleInput = {
    name?: StringFieldUpdateOperationsInput | string
    event?: EventUpdateOneWithoutEventGroupNestedInput
  }

  export type EventGroupUncheckedUpdateWithoutEventPeopleInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_event?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type EventGroupCreateManyEventInput = {
    id?: number
    name: string
  }

  export type EventPeopleCreateManyEventInput = {
    id?: number
    id_group: number
    name: string
    cpf: string
    matched?: string
  }

  export type EventGroupUpdateWithoutEventInput = {
    name?: StringFieldUpdateOperationsInput | string
    EventPeople?: EventPeopleUpdateManyWithoutGroupNestedInput
  }

  export type EventGroupUncheckedUpdateWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    EventPeople?: EventPeopleUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type EventGroupUncheckedUpdateManyWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type EventPeopleUpdateWithoutEventInput = {
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    matched?: StringFieldUpdateOperationsInput | string
    group?: EventGroupUpdateOneWithoutEventPeopleNestedInput
  }

  export type EventPeopleUncheckedUpdateWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_group?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    matched?: StringFieldUpdateOperationsInput | string
  }

  export type EventPeopleUncheckedUpdateManyWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_group?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    matched?: StringFieldUpdateOperationsInput | string
  }

  export type EventPeopleCreateManyGroupInput = {
    id?: number
    id_event: number
    name: string
    cpf: string
    matched?: string
  }

  export type EventPeopleUpdateWithoutGroupInput = {
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    matched?: StringFieldUpdateOperationsInput | string
    event?: EventUpdateOneWithoutEventPeopleNestedInput
  }

  export type EventPeopleUncheckedUpdateWithoutGroupInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_event?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    matched?: StringFieldUpdateOperationsInput | string
  }

  export type EventPeopleUncheckedUpdateManyWithoutGroupInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_event?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    matched?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use EventCountOutputTypeDefaultArgs instead
     */
    export type EventCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventGroupCountOutputTypeDefaultArgs instead
     */
    export type EventGroupCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventGroupCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventDefaultArgs instead
     */
    export type EventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventGroupDefaultArgs instead
     */
    export type EventGroupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventGroupDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventPeopleDefaultArgs instead
     */
    export type EventPeopleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventPeopleDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}